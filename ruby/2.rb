# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

@fib_cache = [0, 1]
def memoized_fib(i, cache)
  if cache[i].nil?
    cache[i] = memoized_fib(i-1, cache) + memoized_fib(i-2, cache)
  end
  return cache[i]
end

def fibs_smaller_than(max)
  cache = [0, 1]
  i = 0
  while(memoized_fib(i, cache) < max)
    i+=1
  end
  return cache.take(cache.size-1)
end

def main(max)
  fib_nrs = fibs_smaller_than(max)
  return fib_nrs.select{|i| i.odd?}.reduce(:+)
end

print main(4*10**6)
